name: Build, Test, and Push Docker Image

#on:
 #pull_request:
   #branches:
    # - main
on:
  workflow_dispatch:
  
env:
  JAVA_VERSION: '17'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build with Maven
        run: mvn -f ./pom.xml clean package -Pprd

      - name: Run Unit Tests
        run: mvn test

      - name: Generate Test Report
        run: mvn surefire-report:report-only

      - name: Upload Test Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: target/surefire-reports

  sonar-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: SonarQube Scan
        run: mvn clean verify sonar:sonar -Dsonar.token=${{ env.SONAR_TOKEN }}

            - name: Check SonarQube Quality Gate
        run: |
          echo "üîç Verificando status do Quality Gate no SonarQube..."

          # Verificar se o token n√£o est√° vazio
          if [ -z "${{ env.SONAR_TOKEN }}" ]; then
            echo "‚ùå Erro: SONAR_TOKEN n√£o est√° definido!"
            exit 1
          fi

          # Fazer a requisi√ß√£o com autentica√ß√£o
          response=$(curl -s -w "%{http_code}" -u "${{ env.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT_KEY }}")

          # Separar corpo da resposta e status HTTP
          http_status="${response: -3}"
          json_body="${response:0:-3}"

          echo "üîπ C√≥digo HTTP recebido: $http_status"
          echo "üìú Resposta da API: $json_body"

          # Se a resposta n√£o for 200, pode indicar erro de autentica√ß√£o
          if [[ "$http_status" -ne 200 ]]; then
            echo "‚ùå Erro: A API retornou um c√≥digo HTTP diferente de 200!"
            exit 1
          fi

          # Validar se a resposta √© um JSON v√°lido antes de usar jq
          if ! echo "$json_body" | jq . > /dev/null 2>&1; then
            echo "‚ùå Erro: A resposta da API n√£o √© um JSON v√°lido!"
            exit 1
          fi

          # Extrair status do Quality Gate
          status=$(echo "$json_body" | jq -r '.projectStatus.status')

          echo "üö¶ Status do Quality Gate: $status"

          if [[ "$status" != "OK" ]]; then
            echo "‚ùå O Quality Gate falhou!"
            exit 1
          fi


  build-and-push-image:
    needs: sonar-analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: dasilvathaynara/ez-fastfood-order-ms:latest

  # deploy:
  #   needs: build-and-push-image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #
  #     - name: Install kubectl
  #       run: |
  #         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  #         chmod +x kubectl
  #         sudo mv kubectl /usr/local/bin/
  #
  #     - name: Update kubeconfig for EKS
  #       run: aws eks update-kubeconfig --region us-east-1 --name ez-fastfood-cluster-dev
  #
  #     - name: Apply Kubernetes manifests
  #       run: |
  #         kubectl apply -f k8s/api-deployment.yaml --validate=false
  #         kubectl apply -f k8s/api-service.yaml
  #         kubectl apply -f k8s/api-configmap.yaml
  #         kubectl apply -f k8s/ezfastfood-secrets.yaml
