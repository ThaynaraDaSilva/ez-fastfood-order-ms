name: Build, Test, and Push Docker Image

on:
  push:
    branches:
    - develop
    - chore/payment-ms-integration
  
env:
  JAVA_VERSION: '17'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  DOCKER_FILE_TAG: 'dasilvathaynara/ez-fastfood-order-ms:latest'
  EKS_CLUSTER_NAME: 'ez-fastfood-cluster-dev'
  SQS_ACCESS_KEY: ${{ secrets.AWS_SQS_ACCESS_KEY }}
  SQS_SECRET_KEY: ${{ secrets.AWS_SQS_SECRET_KEY }}


jobs:
  setup-jdk:
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

  build-package:
    needs: setup-jdk
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Build with Maven
        env:
          SQS_ACCESS_KEY: ${{ env.SQS_ACCESS_KEY }}
          SQS_SECRET_KEY: ${{ env.SQS_SECRET_KEY }}
        run: mvn -f ./pom.xml clean package -Pprd

  run-tests:
    needs: build-package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run Unit Tests
        run: mvn test

      - name: Generate Test Report
        run: | 
          mvn surefire-report:report-only
          ls -lha
        

      - name: Show Test Results in Logs
        if: always()
        run: |
          echo "========= Surefire Test Results ========="
          cat target/surefire-reports/*.txt || echo "No test results found"

      - name: Upload Test Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: target/surefire-reports

  # sonar-analysis:
  #   needs: run-tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: SonarQube Scan
  #       run: mvn clean verify sonar:sonar -Dsonar.token=${{ env.SONAR_TOKEN }}

#  check-quality-gate:
#    needs: sonar-analysis
#    runs-on: ubuntu-latest
#    steps:
#      - name: Wait for SonarQube Analysis to Complete
#        run: |
#          MAX_ATTEMPTS=10
#          ATTEMPT=0
#          STATUS="NONE"
#
#          while [ "$STATUS" == "NONE" ] && [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
#            echo "Waiting for SonarQube analysis to complete... (attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)"
#            sleep 10
#            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}" "${{ env.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT_KEY }}")
#            STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status' 2>/dev/null)
#            ATTEMPT=$((ATTEMPT+1))
#          done
#
#          if [ "$STATUS" == "NONE" ]; then
#            echo "SonarQube analysis did not complete in time."
#            exit 1
#          fi
#
#          echo "Quality Gate Status: $STATUS"
#
#          if [ "$STATUS" != "OK" ]; then
#            echo "Quality gate failed: $STATUS"
#            exit 1
#          fi

  build-and-push-image:
    needs: run-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_FILE_TAG}}
  deploy:
   needs: build-and-push-image
   runs-on: ubuntu-latest
   steps:
   - name: Checkout repository
     uses: actions/checkout@v3
   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v2
     with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: us-east-1 # Replace with your region
   - name: Install kubectl
     run: |
       curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
       chmod +x kubectl
       sudo mv kubectl /usr/local/bin/

   - name: Update kubeconfig for EKS
     run: aws eks update-kubeconfig --region us-east-1 --name ${{env.EKS_CLUSTER_NAME}}

   - name: Apply Kubernetes manifests
      #kubectl apply -f k8s/order-serviceaccount.yaml
     run: |
       
       kubectl apply -f k8s/order-configmap.yaml
       kubectl apply -f k8s/order-secrets.yaml
       kubectl apply -f k8s/order-service.yaml
       kubectl apply -f k8s/order-deployment.yaml --validate=false
       
       
       
       
